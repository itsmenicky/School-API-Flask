#Primeiramente declaramos um nome para nosso workflow
name: Continuous Integration

#Declaramos os triggers deste workflow, no meu caso declarei para este workflow
#executar sempre que for aberto um pull request  ou realizado um push na branch 
#main
on: 
  pull_request:
    branches:
      'main'
  push:
    branches:
      'main'

#Aqui definimos os trabalhos realizados por este workflow, com o nome 
#continuous-integration, informando que este workflow deve ser executado
#em uma máquina ubuntu. 
jobs:
  continuous-integration:
    runs-on: ubuntu-latest

    #Aqui definimos o passo a passo de tudo que queremos que esse job realize.
    steps:
      #No uses colocamos que queremos usar o checkout do github actions na versão
      #3, isso fará com que quando um desenvolvedor abrir um pull request, por 
      #exemplo, na branch feature/[Jira-task] o github irá clonar essa branch e 
      #executar os testes nela.
      - uses: actions/checkout@v3
      #Instalamos o python na máquina com o setup-python do github actions na versão
      #4. A versão a ser instalada é a 3.10.12.
      - name: Using python
        uses: actions/setup-python@v4
        with:
         python-version: v3.10.12
      #Definimos a ação de instalação das dependências que a API utiliza e execução
      #dos testes.
      - name: run install and test
        run: |
         pip install flask
         pip install Flask-SQLAlchemy
         python3 -m unittest